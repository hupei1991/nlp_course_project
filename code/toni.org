#+begin_src python :session :results output
import codecs
import nltk.data
from nltk.compat import string_types
from nltk.tokenize import *
from nltk.corpus.reader.util import *
from nltk.corpus.reader.api import *


# this is a first pass at modifying the PlainTextCorpusReader



class LameBrainCorpusReader(CorpusReader):
    """
    A simple-minded corpus generator that skips the steps 
    we don't want to automate for NLP class.
    """

    CorpusView = StreamBackedCorpusView


    def __init__(self, root, fileids,
#                 word_tokenizer=WordPunctTokenizer(),
#                 sent_tokenizer=nltk.data.LazyLoader(
#                     'tokenizers/punkt/english.pickle'),
#                 para_block_reader=read_blankline_block,
                 encoding='utf8'):
        CorpusReader.__init__(self, root, fileids, encoding)
#        self._word_tokenizer = word_tokenizer
#        self._sent_tokenizer = sent_tokenizer
#        self._para_block_reader = para_block_reader

   def raw(self, fileids=None):
        if fileids is None: fileids = self._fileids
        elif isinstance(fileids, string_types): fileids = [fileids]
        raw_texts = []
        for f in fileids:
            _fin = self.open(f)
            raw_texts.append(_fin.read())
            _fin.close() 
        return concat(raw_texts)


#+end_src
